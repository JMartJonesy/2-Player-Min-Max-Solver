head	1.5;
access;
symbols;
locks
	jem4687:1.5; strict;
comment	@ * @;


1.5
date	2012.11.07.19.10.46;	author jem4687;	state Exp;
branches;
next	1.4;

1.4
date	2012.11.03.02.02.17;	author jem4687;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.02.02.06.05;	author jem4687;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.22.16.46.48;	author jem4687;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.17.21.46.42;	author jem4687;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Pretty up the comments
@
text
@/**
 * Name: KaylesGame.h
 *
 * Description:  Header file for a Kayles Game.
 *
 * $Id: KaylesGame.h,v 1.4 2012/11/03 02:02:17 jem4687 Exp jem4687 $
 *
 * Revisions:
 * $Log: KaylesGame.h,v $
 *
 * Revision 1.9  2012/10/29 02:40:02  mal4012
 * Minor comment changes.
 *
 * Revision 1.8  2012/10/25 00:45:24  jem4687
 * Changed findsuccessors to receive a trip
 *
 * Revision 1.7  2012/10/21 18:16:29  mal4012
 * Changed comments.
 *
 * Revision 1.6  2012/10/21 03:04:07  mal4012
 * Redid comments.
 *
 * Revision 1.5  2012/10/18 03:22:10  p334-04e
 * works now
 *
 * Revision 1.4  2012/10/17 21:43:02  mal4012
 * Added play feature.
 *
 * Revision 1.3  2012/10/17 01:38:41  mal4012
 * Changed base cases.
 *
 * Revision 1.2  2012/10/16 02:29:08  jem4687
 * added functionality to print
 *
 * Revision 1.1  2012/10/16 02:25:21  jem4687
 * Initial revision
 *
 * @@author:Jesse Martinez
 * @@author:Michael Loper
 */

#ifndef KAYLES_H
#define KAYLES_H

#include <string>
#include <iostream>
#include <vector>
#include <utility>
#include "Game.h"

typedef triple< int, int, std::vector< std::vector<int> > > trip;

class KaylesGame: public Game
{
	private:
		// Pair that holds player character and player type
		std::pair<std::string,std::string> p1;
		std::pair<std::string,std::string> p2;

	public:
		/**
		 * Constructor
		 *
		 * Description:  Creates a game of kayles between the user and
		 *		 the pc with the initial amount of pins and
		 * 		 board received.
		 *
		 * @@param int    - A "dummy" int to differentiate the
		 *		   interactive mode from the solver mode.
		 *        pins   - The initial amount of pins in the row.
		 *        b      - A vector of strings representing the pins.
		 */
		KaylesGame( const int , int pins , std::vector<std::string> b );

		/**
		 * Constructor
		 *
		 * Description:  Creates a game of kayles to be ran in solver
		 * mode.
		 *
		 * @@param pins   - The initial amount of pins in the row.
		 *        b      - A vector of strings representing the pins.
		 */
		KaylesGame( int pins , std::vector<std::string> b );

		/**
		 * Name:  generateBoard
		 *
		 * Description: Generates the board with 1's and 0's based off
		 * of the strings received from the command line arguments.
		 *
		 * @@param b     - The board.
		 */
		void generateBoard( std::vector<std::string> b );

		/**
		 * Name: move
		 *
		 * Description:  Calls the proper move function based on the
		 *               received player number.  Removes the ammount
		 *               of pins the player chose.
		 *
		 * @@param p      - The number representing whose turn it is.
		 */
		void move( const int p );

		/**
		 * Name: moveHuman
		 *
		 * Description: Asks for user input on how many pins to take
		 * away.
		 *
		 * @@param p     - A string representing either player "X" or
		 *		  "O".
		 *
		 * @@return      The number of pins chosen.
		 */
		int moveHuman( const std::string p );

		/**
		 * Name: movePC
		 *
		 * Description: Move for PC player calls the solver algorithim
		 *		to find the best possible move given for the
		 * 		current successor, and sets to board to the
		 *		best possible board.
		 *
		 * @@param turn      - Integer to keep track of the turn.
		 *        successor - The current successor of a kayles
		 * 		      configuration.
		 *
		 * @@return      A triple that holds the best score, the best
		 * 		move, and the best board.
		 */
		trip movePC( const int turn, std::vector< trip > successor );

		/**
		 * Name: findSuccessors
		 *
		 * Description: Generates all possible valid moves.
		 *
		 * @@param b     - The current board, the number of pins to take
		 *		away, and the number of remaining pins.
		 *
		 * @@return      A vector of all the successors.
		 */
		std::vector< trip > findSuccessors( trip b );

		/**
		 * Name: print
		 *
		 * Description: Prints an "X" for each pin left and "_" for
		 * missing pins.
 		 */
		void print();

		/**
		 * Name: getName
		 *
		 * Description: Returns the name of the player received.
		 *
		 * @@param p     - An integer representing whose turn it is.
		 *
		 * @@return      String representation of the current player.
		 */
		std::string getName( const int ) const;

		/**
		 * Name: checkBaseCase
		 *
		 * Description:  Determines if a base case as been reached.
		 *
		 * @@param check  - A vector of the remaining moves.
		 *
		 * @@return       True iff there are no remaining moves.
		 */
		bool checkBaseCase( const std::vector< trip > check ) const;

		/**
		 * Name: baseCase
		 *
		 * Description: Returns a standard base case representation
		 * for the kayles game.  For this game it is a score of -1 a
		 * move of 0 and an empty board.
		 *
		 * @@return      A triple with a score, move, and board.
		 */
		trip baseCase() const;

		/**
		 * Name: invert
		 *
		 * Description: A dummy function to only be used in
		 * Connect3Game.
		 *
		 * @@return      A board.
		 */
		std::vector< std::vector<int> > invert(
		std::vector< std::vector<int> > b );


};

#endif
@


1.4
log
@*** empty log message ***
@
text
@d6 1
a6 1
 * $Id: KaylesGame.h,v 1.11 2012/10/29 02:40:02 mal4012 Exp jem4687 $
d10 2
a11 1
 * Revision 1.11  2012/10/29 02:40:02  mal4012
a12 1
 *
@


1.3
log
@*** empty log message ***
@
text
@a204 1

@


1.2
log
@*** empty log message ***
@
text
@d6 1
a6 1
 * $Id: KaylesGame.h,v 1.7 2012/10/21 18:16:29 mal4012 Exp jem4687 $
d10 7
d26 1
a26 7
 * Revision 1.4  2012/10/18 02:32:07  jem4687
 * WORKS!!!!!!!!!!
 *
 * Revision 1.1  2012/10/17 21:46:42  jem4687
 * Initial revision
 *
 * Revision 1.3  2012/10/17 21:43:02  mal4012
d53 1
a53 1
class Kayles: public Game
d73 1
a73 1
		Kayles( int , int pins , std::vector<std::string> b );
d84 1
a84 1
		Kayles( int pins , std::vector<std::string> b );
d105 1
a105 1
		void move( int p );
d118 1
a118 1
		int moveHuman( std::string p );
d135 1
a135 1
		trip movePC( int turn, std::vector< trip > successor );
d142 2
a143 2
		 * @@param p     - The number of pins left in the row.
		 *        b     - The current board.
d147 1
a147 2
		std::vector< trip > findSuccessors(
			int p,std::vector< std::vector<int> > );
d166 1
a166 1
		std::string getName( int );
d177 1
a177 1
		bool checkBaseCase( std::vector< trip > check );
d188 14
a201 1
		trip baseCase();
d205 1
@


1.1
log
@Initial revision
@
text
@d1 39
a39 21
// $Id: KaylesGame.h,v 1.3 2012/10/17 21:43:02 mal4012 Exp jem4687 $
//
// Revisions:
// $Log: KaylesGame.h,v $
// Revision 1.3  2012/10/17 21:43:02  mal4012
// Added play feature.
//
// Revision 1.3  2012/10/17 01:38:41  mal4012
// Changed base cases.
//
// Revision 1.2  2012/10/16 02:29:08  jem4687
// added functionality to print
//
// Revision 1.1  2012/10/16 02:25:21  jem4687
// Initial revision
//
//
//
//
// @@author:Jesse Martinez
// @@author:Michael Loper
d50 2
d60 44
a103 9
		// Creates a game of kayles between the
		// computer and user with received board
		Kayles( int , int pins , std::vector<char> b );

		// Creates a game of kayles for a
		// computer player to solve giving an initial board
		Kayles( int pins , std::vector<char> b );

		// Makes a move depending on which player number was reveived
d106 11
a116 2
		// Move for human player
		// @@return integer of how many pins user wishes to take
d119 36
a154 15
		// Move for pc player
		// @@return pair holding player bestScore(route)
		// and bestMove(pins to take)
		triple< int, int, std::vector< std::vector<int> > > movePC(
		int turn, std::vector< triple< int, int, std::vector<
		std::vector<int> > > > successor );

		// Creates all possible successors depending on pin ammount
		// received
		// @@return a vector of possible successors
		std::vector< triple< int, int, std::vector<
		std::vector<int> > > > findSuccessors( int p,
		std::vector< std::vector<int> > );

		// Prints out a X for each pin left
d157 9
a165 4
		// @@return ammount of pins left
		int getPennies();

		// @@return name of received player number
d168 21
a188 9
		// TODO
		bool checkBaseCase(std::vector<
		triple< int, int, std::vector< std::vector<int> > > > check );

		// TODO
		triple< int, int, std::vector< std::vector<int> > > baseCase();

		// TODO
		void generateBoard( std::vector<char> b );
@
