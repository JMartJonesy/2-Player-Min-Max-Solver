head	1.6;
access;
symbols;
locks
	jem4687:1.6; strict;
comment	@ * @;


1.6
date	2012.10.16.02.27.10;	author jem4687;	state Exp;
branches;
next	1.5;

1.5
date	2012.10.15.22.05.03;	author jem4687;	state Exp;
branches;
next	1.4;

1.4
date	2012.10.15.21.38.49;	author jem4687;	state Exp;
branches;
next	1.3;

1.3
date	2012.10.15.17.23.16;	author jem4687;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.10.22.30.06;	author jem4687;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.10.20.47.03;	author jem4687;	state Exp;
branches;
next	;


desc
@@


1.6
log
@added a few things for kayles
@
text
@//
// $Id: game.h,v 1.5 2012/10/15 22:05:03 jem4687 Exp jem4687 $
//
// Revisions:
// $Log: game.h,v $
// Revision 1.5  2012/10/15 22:05:03  jem4687
// added generateBoard
//
// Revision 1.4  2012/10/15 21:38:49  jem4687
// added new triple class
//
// Revision 1.3  2012/10/15 18:05:07  mal4012
// Changed a few formatting issues.
//
// Revision 1.2  2012/10/15 17:22:05  jem4687
// added data and data methods
//
// Revision 1.2  2012/10/10 22:30:06  jem4687
// included inhetiance
//
// Revision 1.1  2012/10/10 20:47:03  jem4687
// Initial revision
//
//
//
//
//
//
//
//
// @@author:Jesse Martinez
// @@authro:Michael Loper

#ifndef GAME_H
#define GAME_H

#include <vector>
#include <utility>
#include <string>

template <class T1, class T2, class T3> struct triple
{
  /*typedef T1 first_type;
  typedef T2 second_type;
  typedef T3 third_type;*/

        T1 first;
        T2 second;
        T3 board;
        triple()
                : first( T1() ), second( T2() ), board( T3() ) {}
        triple( const T1& x, const T2& y, const T3& z )
                : first( x ), second( y ), board( z ) {}
        template < class U, class V, class W >
        triple (const triple< U,V,W > &p)
                : first(p.first), second(p.second), board( p.board ) {}
};


class Game
{
	private:
		std::vector< triple<int,int,std::vector< std::vector<int> > > > memo;
		std::vector< std::pair<int,int> > scores;
		int data;
	public:
		Game( int d );
		virtual ~Game()=0;
		std::pair<int,int>  solver(int turn, std::vector<
		triple< int,int,std::vector< std::vector<int> > > > successor);
		virtual std::vector< triple<int,int,std::vector< std::vector<int> > > > findSuccessors(int, std::vector< std::vector<int> >)=0;
		virtual void print()=0;
		virtual int moveHuman(std::string p)=0;
		virtual void move(int p)=0;
		virtual bool checkBaseCase(std::vector< triple<int,int,std::vector< std::vector<int> > > > check)=0;
		virtual std::pair<int,int> baseCase()=0;
		int getData();
		void changeData( int m );
		bool compareBoard( std::vector< std::vector<int> > board1,
				std::vector< std::vector<int> > board2 );
		virtual void generateBoard( std::vector<char> b )=0;

		std::vector< std::vector<int> > board;
};

inline Game::~Game(){};

#endif
@


1.5
log
@added generateBoard
@
text
@d2 1
a2 1
// $Id: game.h,v 1.4 2012/10/15 21:38:49 jem4687 Exp jem4687 $
d6 3
d71 1
a71 1
		virtual std::vector< triple<int,int,std::vector< std::vector<int> > > > findSuccessors(int)=0;
@


1.4
log
@added new triple class
@
text
@d2 1
a2 1
// $Id: game.h,v 1.3 2012/10/15 18:05:07 mal4012 Exp jem4687 $
d6 3
d77 4
a80 1
		std::vector< std::vector<int> > board2 );
@


1.3
log
@added data calls instead of using pennies
@
text
@d2 1
a2 1
// $Id: game.h,v 1.2 2012/10/10 22:30:06 jem4687 Exp jem4687 $
d6 6
d35 20
a54 1
class game
d57 1
a57 1
		std::vector< std::pair<int,int> > memo;
d61 5
a65 4
		game( int d );
		virtual ~game()=0;
		std::pair<int,int>  solver(int turn, std::vector< std::pair<int,int> > successor);
		virtual std::vector< std::pair<int,int> > findSuccessors(int)=0;
d69 1
a69 1
		virtual bool checkBaseCase(std::vector< std::pair<int,int> > check)=0;
d73 2
d77 1
a77 1
inline game::~game(){};
@


1.2
log
@included inhetiance
@
text
@d2 1
a2 1
// $Id: game.h,v 1.1 2012/10/10 20:47:03 jem4687 Exp jem4687 $
d6 3
d32 3
a34 1

d36 1
d45 2
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
// $Id: $
d5 4
a8 1
// $Log: $
d17 1
d31 3
a33 3
		~game();
		std::vector< std::pair<int,int> > solver(int turn, std::vector< std::pair<int,int> > successor);
		virtual std::vector< std::pair<int,int> > findSuccessors=0;
d38 1
a38 2
		virtual std::pair<int,int> baseCase();
		
d40 2
@
