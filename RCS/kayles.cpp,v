head	1.7;
access;
symbols;
locks
	jem4687:1.7; strict;
comment	@// @;


1.7
date	2012.11.07.19.10.46;	author jem4687;	state Exp;
branches;
next	1.6;

1.6
date	2012.11.03.02.02.17;	author jem4687;	state Exp;
branches;
next	1.5;

1.5
date	2012.11.02.02.06.05;	author jem4687;	state Exp;
branches;
next	1.4;

1.4
date	2012.10.22.16.46.48;	author jem4687;	state Exp;
branches;
next	1.3;

1.3
date	2012.10.17.23.58.42;	author jem4687;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.17.21.46.42;	author jem4687;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.16.02.25.21;	author jem4687;	state Exp;
branches;
next	;


desc
@made kayles class with all pieces working
@


1.7
log
@Pretty up the comments
@
text
@/**
 * Name: kayles.cpp
 * Description: The main for a Kayles Game.
 *
 * $Id: kayles.cpp,v 1.6 2012/11/03 02:02:17 jem4687 Exp jem4687 $
 *
 * Revisions:
 * $Log: kayles.cpp,v $
 *
 * Revision 1.5  2012/10/29 02:40:02  mal4012
 * Minor comment changes.
 *
 * Revision 1.4  2012/10/25 00:45:24  jem4687
 * Changed findsuccessors to receive a trip
 *
 * Revision 1.3  2012/10/21 18:16:29  mal4012
 * Changed comments.
 *
 * Revision 1.2  2012/10/20 22:14:13  mal4012
 * Editted comments.
 *
 * Revision 1.1  2012/10/20 22:11:16  mal4012
 * Moved main into kayles.cpp.
 *
 *
 * @@author:Jesse Martinez
 * @@author:Michael Loper
 */

#include <sstream>
#include <iostream>
#include <cstdlib>
#include <cassert>
#include <cstring>

#include "KaylesGame.h"
#include "Game.h"

using namespace std;

/**
 * Name: main
 *
 * Description:  Creates and runs a Kayles Game.
 *
 * @@param argc   - The number of arguments entered.
 *        argv[] - A pointer to an array of chars representing the arguments
 *                 entered.
 *
 * @@return       0, to indicate a smooth program execution.
 */
int main( int argc, const char* argv[] )
{
	const char* PLAY("play");
	// Must receive at least two arguments.
	if ( argc < 2 ){
		cerr << "Usage: " << argv[0] << " [play] num_pins_1"\
			" num_pins_2 ...";
		cout << endl;
		exit( 1 );
	} else {
		vector<string> c;
		int count = 0;
		int thePins;
		// If the first argument given is not play enter solver mode.
		if( strcmp( PLAY,argv[1] )){
			// Loop through the arguments.
			for( int i = 1; i < argc; ++i ){
				c.push_back(argv[i]);
				string p = argv[i];
				stringstream ss( p );
				ss >> thePins;
				//int p = atoi( argv[i] );
				count += thePins;
				// Make sure the arguments are positive
				// integers.
				if ( thePins < 0 ){
					cerr << "Invalid pin ammount, must"\
						" be an integer >= 0.";
	                		cout << endl;
        	        		exit( 1 );
				}
				if ( !thePins && p != "0" ){
					cerr << "Invalid pin ammount, must"\
                                                " be an integer >= 0.";
                                        cout << endl;
                                        exit( 1 );
				}
			}
			// Create the game on the ammount of pins and the pins
			// given.
			KaylesGame k( count , c );
			// Check for no pins.
			if ( k.getData() == 0 )
				cout << "No pins on the board so best move is "\
					"no move with a score of one." << endl;
			else {
				// Find the best possible move, score, and
				// board.
				triple<int,int,vector< vector<int> > > 
				b( k.getData(), 0 , k.board );
				triple<int,int,vector< vector<int> > > moved =
				k.movePC( 0,k.findSuccessors( b ));
				k.board = moved.board;
				// Print the best move if the score is
				// positive otherwise default move is to take
				// one.
				if ( moved.first == 1 ){
					cout << "Best ammount of pins to take"\
					" is " << moved.second << endl;
					cout << "With a board of ";
					k.print();
				} else {
					cout << "Score is " << moved.first << \
					" so default move to take 1 from the "\
					"leftmost column." << endl;
				}
			}
		}
		// If we see the word play enter interactive mode.
		else if( !strcmp( PLAY,argv[1] )){
			vector<string> c;
			// Loop through the pins given.
			for( int i = 2; i < argc; ++i ){
                                c.push_back(argv[i]);
				string p = argv[i];
                                stringstream ss( p );
                                ss >> thePins;
                                count += thePins;
				// Make sure the arguments are positive
				// integers.
				if ( thePins < 0 ){
                                        cerr << "Invalid pin ammount, must"\
                                                " be an integer >= 0.";
                                        cout << endl;
                                        exit( 1 );
                                }
				if ( !thePins && p != "0" ){
                                        cerr << "Invalid pin ammount, must"\
                                                " be an integer >= 0.";
                                        cout << endl;
                                        exit( 1 );
                                }

                        }
			// Create the game on the ammount of pins and the pins
                        // given.
                        KaylesGame k( count , c );
			// Player to move first wins by default if there are
			// no pins.
                        if ( k.getData() == 0 )
                                cout << "No pins on the board, so human"\
				" player wins by default." << endl;
                        else {
				// Play the game.
				int turn = 0;
				while ( k.getData() !=0 ){
					if ( turn % 2 == 0 )
						k.move( 1 );
					else
						k.move( 2 );
					++turn;
				}
				// Print out the loser.
				if (( turn-1 ) % 2 == 1 )
		                        cout << "Player " << k.getName( 1 )
						<< " loses" << endl;
               			else
                        		cout << "Player " << k.getName( 2 )
						<< " loses" << endl;

			}
		} else {
			// Print usage statement for bad arguments.
			cerr << "Usage: " << argv[0] << " [play] num_pins_1"\
                        " num_pins_2 ...";
		}
	}
	return 0;
}
@


1.6
log
@*** empty log message ***
@
text
@d5 1
a5 1
 * $Id: kayles.cpp,v 1.12 2012/10/29 02:40:02 mal4012 Exp jem4687 $
d9 2
a10 1
 * Revision 1.12  2012/10/29 02:40:02  mal4012
d13 1
a13 1
 * Revision 1.9  2012/10/25 00:45:24  jem4687
d16 1
a16 1
 * Revision 1.8  2012/10/21 18:16:29  mal4012
d19 1
a19 1
 * Revision 1.7  2012/10/20 22:14:13  mal4012
d22 1
a22 1
 * Revision 1.6  2012/10/20 22:11:16  mal4012
@


1.5
log
@*** empty log message ***
@
text
@@


1.4
log
@*** empty log message ***
@
text
@d5 1
a5 1
 * $Id: kayles.cpp,v 1.8 2012/10/21 18:16:29 mal4012 Exp jem4687 $
d9 6
d29 1
d51 1
a51 1
int main( int argc, char* argv[] )
d53 1
d63 1
d65 1
a65 1
		if( strcmp( "play",argv[1] )){
d69 5
a73 2
				int p = atoi( argv[i] );
				count += p;
d76 1
a76 1
				if ( p < 0 ){
d78 1
a78 1
						" be >= 0.";
d82 6
d91 1
a91 1
			Kayles k( count , c );
d99 2
d102 1
a102 2
				k.movePC( 0,k.findSuccessors(
				k.getData(),k.board ));
d120 1
a120 1
		else if( !strcmp( "play",argv[1] )){
d125 4
a128 2
                                int p = atoi( argv[i] );
                                count += p;
d131 1
a131 1
				if ( p < 0 ){
d133 1
a133 1
                                                " be >= 0.";
d137 7
d147 1
a147 1
                        Kayles k( count , c );
@


1.3
log
@edited args
@
text
@d1 21
a21 23
// $Id: kayles.cpp,v 1.2 2012/10/17 21:46:42 jem4687 Exp jem4687 $
//
// Revisions:
// $Log: kayles.cpp,v $
// Revision 1.2  2012/10/17 21:46:42  jem4687
// *** empty log message ***
//
// Revision 1.3  2012/10/17 21:43:02  mal4012
// Added play feature.
//
// Revision 1.3  2012/10/17 01:38:41  mal4012
// Changed base cases.
//
// Revision 1.2  2012/10/16 02:29:08  jem4687
// added functionality to print
//
// Revision 1.1  2012/10/16 02:25:21  jem4687
// Initial revision
//
//
//
// @@author:Jesse Martinez
// @@author:Michael Loper
d33 11
a43 1
// Creates and runs a takeaway game
d46 2
a47 3
	// Must receive atleast 2 params
	if ( argc < 2 )
	{
d52 2
a53 4
	}
	if ( argc >= 2 )
	{
		vector<char> b;
d55 5
a59 6
		if( strcmp( "play",argv[1] ))
		{
			for( int i = 1; i < argc; ++i )
			{
				//cout << *argv[i];
				b.push_back(*argv[i]);
d62 3
a64 2
				if ( p < 0 )
				{
d71 4
a74 1
			Kayles k( count , b );
d76 8
a83 6
				cout << "No pins on the board so best move is no move"\
					" with a score of one." << endl;
			else
			{
				triple<int,int,vector< vector<int> > > moved = k.movePC(
				0,k.findSuccessors( k.getData(),k.board ));
d85 3
d89 2
a90 2
					cout << "Best ammount of pins to take is " \
					<< moved.second << endl;
d93 1
a93 1
				}else{
d95 2
a96 1
					" so default move to take 1" << endl;
d100 6
a105 6
		else if( !strcmp( "play",argv[1] ))
		{
			 for( int i = 2; i < argc; ++i )
                        {
                                //cout << *argv[i];
                                b.push_back(*argv[i]);
d108 3
a110 2
                                if ( p < 0 )
                                {
d117 5
a121 1
                        Kayles k( count , b );
d125 2
a126 2
                        else
                        {
d128 1
a128 2
				while ( k.getData() !=0 )
				{
d135 1
d137 2
a138 1
		                        cout << "Player " << k.getName( 1 ) << " loses" << endl;
d140 2
a141 1
                        		cout << "Player " << k.getName( 2 ) << " loses" << endl;
d144 2
a145 1
		}else{
a149 21
	/*
	else if ( argc == 3 )
	{
		// Keeps track of turns
	        int turn = 0;

      	        // Runs game
		while ( t.getData() != 0 )
        	{
                	if ( turn % 2 == 0 )
                        	t.move( 1 );
                	else
                        	t.move( 2 );
                	turn++;
        	}
        	if (( turn-1 ) % 2 == 0 )
                	cout << "Player " << t.getName( 1 ) << " loses" << endl;
       		else
                	cout << "Player " << t.getName( 2 ) << " loses" << endl;
	}*/

@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
// $Id: kayles.cpp,v 1.3 2012/10/17 21:43:02 mal4012 Exp jem4687 $
d5 3
d117 1
a117 1
				if (( turn-1 ) % 2 == 0 )
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
// $Id: $
d4 13
a16 1
// $Log: $
d27 2
a28 2
#include "kayles.h"
#include "game.h"
a31 179
// Creates a game of takeaway between user and pc with received pennies
Kayles::Kayles( int , int apennies , vector<char> b )
	:Game( apennies ),p1( "X","Human" ),p2( "O","PC" )
{
	generateBoard( b );
}

// Creates a game of takeaway between pc and pc with received pennies
Kayles::Kayles( int apennies , vector<char> b )
	:Game( apennies ),p1( "X","Human" ),p2( "O","PC" )
{
	generateBoard( b );
}

void Kayles::generateBoard( vector<char> b )
{
	board.push_back( vector<int>() );

	for( unsigned i = 0; i < b.size(); ++i )
	{
		if( b[i] == '1'){
			board[0].push_back( 1 );
		}
		else{
			board[0].push_back( 0 );
		}
	}
}

// Calls correct move function depending on received player number
// removes ammount of pennies the player chose
void Kayles::move( int p )
{
	if ( p == 1 )
	{
		if ( p1.second == "Human" )
			changeData( moveHuman( p1.first ));
		else
		{
			pair<int,int> penny=movePC
				( 0,findSuccessors( getData(), board ));
       	                changeData( penny.second );
			cout << "Player " << p1.first << " taking "
				<< penny.second << " pennies" << endl;
		}
	}
	else
	{
		if ( p2.second == "Human" )
			changeData( moveHuman( p2.first ));
		else
		{
			pair<int,int> penny=movePC
				( 0,findSuccessors( getData(),board ));
			changeData( penny.second );
			cout << "Player " << p2.first << " taking "
				<< penny.second << " pennies" << endl;
		}
	}
	print();
}

// Move for human player asks user to choose an ammount from 1 to 3 if possible
// @@return ammount of pennies chosen
int Kayles::moveHuman( string p )
{
	int num = 0;
	int col = 0;
	bool take2 = true;
	do
	{
		cout << "Input number of pins to take away (1,2)"
			<< endl;
		cin >> num;
		if ( num <= 0 || num > 2 || (getData() - num) < 0  )
			cerr << "Taking too many or too few pins" << endl;
		else
		{
			cout << "Input column (if taking 2 pins choose"\
				" left most column of pair)" << endl;
			cin >> col;
			if( col < 0 || col > board[0].size() || board[0][col] == 0 )
				cerr << "Invalid column" << endl;
			else
				if( num == 2 )
					if ( col+1 < board[0].size() )
						if ( board[0][col+1] == 0 )
						{
							cerr << "Cant take"\
							" 2 from this column" << endl;
							take2 = false;
						}
					else
						cerr << "Cant take 2 from this column" <<endl;
						take2 = false;
                }
	}
	while ( num <=0 || num > 3 || (getData() - num) < 0 || col < 0
		|| col > board[0].size() || board[0][col] == 0 || !take2 );
		cout << "Player " << p << " taking " << num << " pennies"
			<< endl;
	board[0][col] == 0;
	if( num == 2 )
		board[0][col+1] == 0;
	return num;
}

// Move for pc player recursively goes through possible moves to find best
// ammount of pennies to take (defaults to 1 if there is no best ammount)
// @@return a pair that holds the best score(score of best route)
// and best move(ammount of pennies to take)
pair<int,int> Kayles::movePC( int turn,vector< triple<int,int,vector< vector<int> > > > successor )
{
	return solver( turn,successor );
}

// Finds all possible successors based on pennies received
// @@return vector of successors
vector< triple<int,int,vector< vector<int> > > > Kayles::findSuccessors( int p, vector< vector<int> > b )
{
	vector< triple<int,int,vector< vector<int> > > > successor;
	for ( int i = 1; i < 3; ++i )
	{
		for ( int j = 0; j < b[0].size(); ++j )
		{
			vector< vector<int> > newBoard(b);
			if( i == 1 )
				if( newBoard[0][j] == 1 )
				{
					newBoard[0][j] = 0;
					successor.push_back( triple<int,int,vector< vector<int> > > ( p-i,i,newBoard ) );
				}
			if( i == 2 )
				if( newBoard[0][j] == 1 )
					if( j + 1 < newBoard[0].size() )
						if( newBoard[0][j+1] == 1 )
						{
							newBoard[0][j] = 0;
							newBoard[0][j+1] = 0;
							successor.push_back( triple<int,int,vector< vector<int> > > ( p-i,i,newBoard ));
						}
		}
	}
	return successor;
}

// Prints a O for each penny left
void Kayles::print()
{
	for ( unsigned i = 0; i < board[0].size(); i++ )
	{
		if( board[0][i] == 1 )
			cout << "X";
		else
			cout << "_";
	}
	cout << endl;
	cout << "Pins left " << getData() << endl;
}

// @@return player received name
string Kayles::getName( int p )
{
	if ( p == 1 )
		return p1.first;
	else
		return p2.first;
}

bool Kayles::checkBaseCase( vector< triple<int,int,vector< vector<int> > > > check )
{
	return ( check.size() <= 1 );
}

pair<int,int> Kayles::baseCase()
{
	return pair<int,int>( 1, 1 );
}

d38 2
a39 1
		cerr << "Usage: " << argv[0] << " [play] num_pennies";
d47 1
a47 1
		if( strcmp( "play",argv[1]) )
d51 1
a51 1
				count++;
d54 2
a55 1
				if ( p < 0 || p > 1 )
d57 2
a58 1
					cerr << "Invalid pin ammount, must be 0 or 1";
d63 19
d83 1
a83 5
		Kayles k( count , b );
		if ( k.getData() == 0 )
			cout << "No pins on the board so best move is "\
			"to take away 0 pins with a score of 1" << endl;
		else
d85 38
a122 9
			pair<int,int> moved = k.movePC( 0,k.findSuccessors( \
			k.getData(),k.board ));
			//k.print();
			if ( moved.first == 1 )
				cout << "Best ammount of pins to take is " \
				<< moved.second << endl;
			else
				cout << "Score is " << moved.first << \
				" so default move to take 1" << endl;
a127 20
		// Must receieve penny ammount greater than 0
		if ( strcmp( "play",argv[1] ))
		{
			cerr << "Usage: " << argv[0] << " [play] num_pennies";
               		cout << endl;
                	exit( 1 );
		}
		if ( atoi( argv[2] ) < 0 )
                {
                        cerr << "Invalid penny ammount, must be >= 0";
                        cout << endl;
                        exit( 1 );
                }
		Takeaway t( 1,atoi( argv[2] ));
		if ( t.getData() == 0 )
		{
			cout << "Starting with 0 pennies so no move can be"\
			" made and human player loses by default" << endl;
			exit( 1 );
		}
@
